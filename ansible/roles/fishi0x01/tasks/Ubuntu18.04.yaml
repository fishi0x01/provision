---
- name: Install apt packages
  apt:
    name: "{{ apt_packages }}"
    force_apt_get: yes
    state: present
    update_cache: yes

################
# libssl-dev fix
################
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=733644
- name: Fix missing opensslconf.h
  file:
    path: "/usr/include/openssl/opensslconf.h"
    src: "../x86_64-linux-gnu/openssl/opensslconf.h"
    state: link

##########
# Arduino
##########
- name: Check if Arduino IDE is installed
  stat: 
    path: "/opt/arduino-{{ arduino_ide.version }}"
  register: arduino

- name: Download and install Arduino IDE
  block:
    - name: Download Arduino IDE
      get_url:
        url: "https://downloads.arduino.cc/arduino-{{ arduino_ide.version }}-linux64.tar.xz"
        dest: "/tmp/arduino-{{ arduino_ide.version }}.tar.xz"
        checksum: "{{ arduino_ide.checksum }}"
        mode: '0777'

    - name: Unarchive Arduino IDE
      unarchive:
        src: "/tmp/arduino-{{ arduino_ide.version }}.tar.xz"
        dest: "/opt/"
        remote_src: yes

    - name: Install Arduino IDE
      become: yes
      become_user: "{{ machine_user }}"
      script: "/opt/arduino-{{ arduino_ide.version }}/install.sh"
  when: not arduino.stat.exists

# https://github.com/esp8266/source-code-examples/issues/26
- name: Add board access
  user:
    name: "{{ machine_user }}"
    groups: tty,dialout
    append: yes

##########
# Fritzing
##########
- name: Check if frtizing IDE is installed
  stat: 
    path: "/opt/fritzing-{{ fritzing_ide.version }}"
  register: fritzing

- name: Download and install fritzing IDE
  block:
    - name: Download fritzing IDE
      get_url:
        url: "{{ fritzing_ide.url }}"
        dest: "/tmp/fritzing-{{ fritzing_ide.version }}.tar.bz2"
        checksum: "{{ fritzing_ide.checksum }}"
        mode: '0777'

    - name: Ensure fritzing dir exists
      file:
        path: "/opt/fritzing-{{ fritzing_ide.version }}"
        state: directory
        mode: '0755'

    - name: Unarchive fritzing IDE
      unarchive:
        src: "/tmp/fritzing-{{ fritzing_ide.version }}.tar.bz2"
        dest: "/opt/fritzing-{{ fritzing_ide.version }}/"
        remote_src: yes
        extra_opts: "--strip-components=1"
  when: not fritzing.stat.exists

##########
# Eagle
##########
- name: Check if Eagle IDE is installed
  stat: 
    path: "/opt/eagle-{{ eagle_ide.version }}"
  register: eagle

- name: Download and install Eagle IDE
  block:
    - name: Download Eagle IDE
      get_url:
        url: "{{ eagle_ide.url }}"
        dest: "/tmp/eagle-{{ eagle_ide.version }}.tar.gz"
        checksum: "{{ eagle_ide.checksum }}"
        mode: '0777'

    - name: Ensure Eagle dir exists
      file:
        path: "/opt/eagle-{{ eagle_ide.version }}"
        state: directory
        mode: '0755'

    - name: Unarchive Eagle IDE
      unarchive:
        src: "/tmp/eagle-{{ eagle_ide.version }}.tar.gz"
        dest: "/opt/eagle-{{ eagle_ide.version }}/"
        remote_src: yes
        extra_opts: "--strip-components=1"

    - name: Set permissions
      file:
        dest: "/opt/eagle-{{ eagle_ide.version }}"
        owner: "{{ machine_user }}"
        group: "{{ machine_user }}"
        recurse: true

    - name: Remove libxcb files
      file:
        path: "/opt/eagle-{{ eagle_ide.version }}/lib/{{ item }}"
        state: absent
      with_items: "{{ eagle_ide.lib_files_to_remove }}"
  when: not eagle.stat.exists

#########
# Keybase
#########
# https://keybase.io/docs/server_security/our_code_signing_key
- name: Copy keybase.asc
  copy:
    src: files/asc/keybase.asc
    dest: /tmp/keybase.asc
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    mode: '0644'

- name: Import keybase.asc
  shell:
    "gpg --import /tmp/keybase.asc"

- name: Download keybase.deb
  get_url:
    url: "https://prerelease.keybase.io/keybase_amd64.deb"
    dest: /tmp/keybase_amd64.deb
    mode: '0640'

- name: Download keybase.deb.sig
  get_url:
    url: "https://prerelease.keybase.io/keybase_amd64.deb.sig"
    dest: /tmp/keybase_amd64.deb.sig
    mode: '0440'

- name: Verify keybase signature
  shell:
    "gpg --verify /tmp/keybase_amd64.deb.sig /tmp/keybase_amd64.deb"

- name: Install keybase.deb
  apt:
    deb: /tmp/keybase_amd64.deb
    state: present
    force_apt_get: yes

#############
# sysctl.conf
#############
- name: Configure inotify limits
  template:
    src: "templates/sysctl.d.inotify.conf"
    dest: "/etc/sysctl.d/10-inotify.conf"
    owner: "root"
    group: "root"
    mode: "644"
  notify: 
    - "reload sysctl"

#########
# SMB
#########
- name: Ensure samba conf dir exists (avoid rpcclient errors)
  file: 
    path: "/etc/samba/"
    state: directory

- name: Ensure samba conf file exists (avoid rpcclient errors)
  file: 
    path: "/etc/samba/smb.conf"
    state: touch

########
# Rust
########
# https://www.rust-lang.org/tools/install
# Script from https://sh.rustup.rs
- name: Install rust
  become: yes
  become_user: "{{ machine_user }}"
  script: "files/rustup-init.sh -y"

- name: Install cargo packages
  become: yes
  become_user: "{{ machine_user }}"
  shell: "cargo install {{ item }}"
  with_items: "{{ cargo_packages }}"

######
# GVM
######
- name: Check if GVM is already installed
  become: yes
  become_user: "{{ machine_user }}"
  stat:
    path: "~/.gvm"
  register: gvm_stat

# https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer
- name: Install GVM
  become: yes
  become_user: "{{ machine_user }}"
  script: "files/gvm-installer"
  when: not gvm_stat.stat.exists

- name: Install go1.4 for compilation of go1.5+
  become: yes
  become_user: "{{ machine_user }}"
  shell: "gvm install go1.4 -B"

######
# NVM
######
- name: Check if NVM is already installed
  become: yes
  become_user: "{{ machine_user }}"
  stat:
    path: "~/.nvm"
  register: nvm_stat

# https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh
- name: Install NVM
  become: yes
  become_user: "{{ machine_user }}"
  script: "files/nvm-install.sh"
  when: not nvm_stat.stat.exists

#####
# R
#####
- name: Add R repo key
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: E298A3A825C0D65DFD57CBB651716619E084DAB9
    state: present

- name: Add R repo
  apt_repository:
    repo: "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/"
    state: present

- name: Install R
  apt:
    name: "r-base"
    update_cache: yes
    force_apt_get: yes
    state: present

############
# Ruby rbenv
############
# Script from https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer
- name: Install rbenv
  become: yes
  become_user: "{{ machine_user }}"
  script: "files/rbenv-installer" 
  ignore_errors: yes

###########
# Alacritty
###########
- name: Get alacritty deb
  get_url:
    url: https://github.com/alacritty/alacritty/releases/download/v0.4.1/Alacritty-v0.4.1-ubuntu_18_04_amd64.deb
    dest: /tmp/alacritty.deb
    checksum: sha256:cb8320d3f5c75349bf6197a6c24a2ee35701d4e06d34515972414f065526557e

- name: Install alacritty
  apt:
    deb: /tmp/alacritty.deb

- name: Set alacritty.desktop
  copy:
    src: files/alacritty.desktop
    dest: "/home/{{ machine_user }}/Desktop/alacritty.desktop"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    mode: '0755'

# Install fishshell
- name: Add fishshell PPA
  apt_repository:
    repo: ppa:fish-shell/release-3

- name: Install fishshell
  apt:
    name: "fish"
    force_apt_get: yes
    state: present
    update_cache: yes

# Starship
- name: Link starship.toml
  become: yes
  become_user: "{{ machine_user }}"
  file:
    path: "/home/{{ machine_user }}/.config/starship.toml"
    src: "/home/{{ machine_user }}/.starship.toml"
    state: link

# Set bash
- name: Set bash as default shell
  user:
    name: "{{ machine_user }}"
    shell: /bin/bash

# Set permissions for bandwhich
# https://github.com/imsnif/bandwhich#usage
- name: Set permissions for bandwhich
  shell:
    cmd: "setcap cap_sys_ptrace,cap_dac_read_search,cap_net_raw,cap_net_admin+ep /home/{{ machine_user }}/.cargo/bin/bandwhich"
